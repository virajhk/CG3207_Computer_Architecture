----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 09/09/2015 10:49:12 AM
-- Design Name: 
-- Module Name: cg3207_lab1_debounce - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity cg3207_lab1_debounce is
    Port ( reset : in STD_LOGIC;
           clk : in STD_LOGIC;
           op : in STD_LOGIC_VECTOR (1 downto 0);
           debounced_rst : out STD_LOGIC;
           debounced_op : out STD_LOGIC_VECTOR (1 downto 0));
end cg3207_lab1_debounce;

architecture Behavioral of cg3207_lab1_debounce is



begin

--debounced_rst <= reset; -- uncommented during & used for simulation
--debounced_op <= op; -- uncommented during & used for simulation
    
    process(clk)
    variable counter: STD_LOGIC_VECTOR (22 downto 0):= (others => '1'); --23 bits counter
    variable rst_prev: STD_LOGIC := '0';
    variable op_prev: STD_LOGIC_VECTOR := "00";
    variable flagCounter: STD_LOGIC := '0';
        begin
            if clk'event and clk = '1' then
                if rst_prev /= reset or op_prev /= op then
                    flagCounter := '1';
                end if;
                
                if flagCounter = '1' then
                    if unsigned(counter) = 0 then
                        flagCounter := '0';
                        debounced_rst <= reset;
                        debounced_op <= op;
                    end if;
                    counter := std_logic_vector(unsigned(counter) - 1);
                end if;
                
                rst_prev := reset;
                op_prev := op;
                
            end if;
            
    end process;
end Behavioral;
