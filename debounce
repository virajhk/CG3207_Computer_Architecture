----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 05.09.2015 22:35:51
-- Design Name: 
-- Module Name: Debounce - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity Debounce is
    Port ( clk : in STD_LOGIC;
           reset : in STD_LOGIC;
           op : in STD_LOGIC_VECTOR(1 downto 0);
           debouncedReset : out STD_LOGIC;
           debouncedOp : out STD_LOGIC_VECTOR(1 downto 0));
end Debounce;

architecture Behavioral of Debounce is

begin

    process(clk)
    variable count : STD_LOGIC_VECTOR(20 downto 0) := (others => '1'); -- 20 bits for 10ms delay
    variable prevReset : STD_LOGIC := '0';
    variable prevOp : STD_LOGIC_VECTOR(1 downto 0) := "00";
    variable isCounterCountingNow : STD_LOGIC := '0';
    
    begin
        if clk'event and clk = '1' then
            -- when the input changes
            if prevReset /= reset or prevOp /= op then 
                isCounterCountingNow := '1'; -- start counter
            end if;
            
            if isCounterCountingNow = '1' then
                if unsigned(count) = 0 then
                    debouncedReset <= reset;
                    debouncedOp <= op;
                    isCounterCountingNow := '0'; -- stop counter
                end if;
                
                count := STD_LOGIC_VECTOR(unsigned(count) - 1);
            end if;
            
            prevReset := reset;
            prevOp := op;
        end if;
    end process;
end Behavioral;
