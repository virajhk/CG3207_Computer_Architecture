----------------------------------------------------------------------------------
 -- Company:
 -- Engineer:
 --
 -- Create Date: 30.08.2015 15:49:56
 -- Design Name:
 -- Module Name: cg3207_lab1_statemach - Behavioral
 -- Project Name:
 -- Target Devices:
 -- Tool Versions:
 -- Description:
 --
 -- Dependencies:
 --
 -- Revision:
 -- Revision 0.01 - File Created
 -- Additional Comments:
 --
 ----------------------------------------------------------------------------------


 library IEEE;
 use IEEE.STD_LOGIC_1164.ALL;

 -- Uncomment the following library declaration if using
 -- arithmetic functions with Signed or Unsigned values
 use IEEE.NUMERIC_STD.ALL;

 -- Uncomment the following library declaration if instantiating
 -- any Xilinx leaf cells in this code.
 --library UNISIM;
 --use UNISIM.VComponents.all;
 entity cg3207_lab1_statemach is
     Port ( clk : in STD_LOGIC;
            op : in STD_LOGIC_VECTOR (1 downto 0);
            reset : in STD_LOGIC;
            cData : out STD_LOGIC_VECTOR (7 downto 0));
 end cg3207_lab1_statemach;

 architecture Behavioral of cg3207_lab1_statemach is
 
 type states is (s0,s1,s2);
 signal currState: states := s0;
 
 component cg3207_lab1_counter is
     Port ( clk : in STD_LOGIC;
            op : in STD_LOGIC_VECTOR(1 downto 0); 
             reset : in STD_LOGIC;
            rAddr : out STD_LOGIC_VECTOR(3 downto 0));
 end component;
 
 component cg3207_lab1_debounce is
    Port ( reset : in STD_LOGIC;
            clk : in STD_LOGIC;
            op : in STD_LOGIC_VECTOR (1 downto 0);
            debounced_rst : out STD_LOGIC;
            debounced_op : out STD_LOGIC_VECTOR (1 downto 0));
 end component;

 component cg3207_lab1_comparator is
     Port ( rData : in STD_LOGIC_VECTOR(7 downto 0);
            compResult : out STD_LOGIC_VECTOR (1 downto 0));
 end component;

 component cg3207_lab1_addsub is
     Port ( rData : in STD_LOGIC_VECTOR(7 downto 0);
            control : in STD_LOGIC_VECTOR (1 downto 0);
            cData : out STD_LOGIC_VECTOR (7 downto 0));
 end component;

 component cg3207_lab1_rom is
     port ( address : in std_logic_vector(3 downto 0);
          data : out std_logic_vector(7 downto 0));
 end component;

 signal rAddress: STD_LOGIC_VECTOR(3 downto 0) := (others => '0');
 signal romData: STD_LOGIC_VECTOR (7 downto 0) := (others => '0');
 signal comparatorResult: STD_LOGIC_VECTOR(1 downto 0) := (others => '0');
 signal processedop: STD_LOGIC_VECTOR(1 downto 0) := (others => '0');
 signal debounced_rst: STD_LOGIC := '0';
 signal debounced_op: STD_LOGIC_VECTOR(1 downto 0) := (others => '0');

 begin
 --counter: cg3207_lab1_counter port map(clk => clk, op => op, reset => reset, rAddr => rAddress);
 counter: cg3207_lab1_counter port map(clk => clk, op => op, reset => debounced_rst, rAddr => rAddress);
 rom: cg3207_lab1_rom port map(address => rAddress, data => romData);
 comparator: cg3207_lab1_comparator port map(rData => romData, compResult => comparatorResult);
 addsub: cg3207_lab1_addsub port map(rData => romData, control => processedop, cData => cData);
 debounce: cg3207_lab1_debounce port map (reset => reset, clk => clk, op => op, debounced_rst => debounced_rst, debounced_op => debounced_op);
 

 processedop <= "00" when currState = s0 else
                "01" when currState = s1 else
                "10" when currState = s2;

     process(clk, debounced_op)
         begin
             if clk'event and clk = '1' then
                 if debounced_op = "01" then
                     if comparatorResult = "10" then
                        currState <= s1; 
                        --processedop <= "01";
                     else
                        currState <= s0;
                         --processedop <= "00";
                     end if;
                 elsif debounced_op = "10" then
                     if comparatorResult = "01" then
                        currState <= s2;
                         --processedop <= "10";
                     else
                        currState <= s0;
                         --processedop <= "00";
                     end if;
                 else
                    currState <= s0;
                     --processedop <= "00";
                 end if;
             end if;
     end process;

 end Behavioral;
